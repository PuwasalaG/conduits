% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/conditional_acf.R
\name{conditional_acf}
\alias{conditional_acf}
\title{Computing conditional autocorrelations at given lags}
\usage{
conditional_acf(data, formula, lag_max, fit_mean, fit_var, df_correlation)
}
\arguments{
\item{data}{a tibble containing all the time series including
$ystar*ystar_{t-k}$ which are uniquely identified by the corresponding
Timestamp.}

\item{formula}{A GAM formula. See \code{\link[mgcv]{formula.gam}}.}

\item{lag_max}{Maximum lag at which to calculate the conditional acf}

\item{fit_mean}{Model object of class "conditional_moment" returned from
\code{\link[conduits]{conditional_mean}}}

\item{fit_var}{Model object of class "conditional_moment" returned from
\code{\link[conduits]{conditional_var}}}

\item{df_correlation}{a vector specifying the degrees of freedom to be considered for each numerical
predictor when fitting additive models for conditional auto-correlations. Each component of the
vector should corresponds to each predictor specified in "z_numeric".}
}
\value{
The function returns a list of objects of class
"glm" as described in \code{\link[stats]{glm}}.
}
\description{
This function computes autocorrelation between $x_t$ and $y_{t+k}$ at $k = 1,2,...$
conditional on a set of time series $z_t$
}
\details{
{ Suppose $x_t$ and $y_t$ are conditionally normalised with respect
to $z_t$ using \code{conditional_mean} and \code{conditional_var}. Then
we can estimate the conditional cross-correlation between $x_t$ and $y_t$ at lag $k$, i.e. $r_k = E(x_ty_{t+k}|z_t)$
via generalised additive models (GAM). \code{conditional_ccf} uses natural splines implemented
in \code{splines} package to estimate the conditional cross-correlations between two
time series given a set of time series predictors. Users first need  to
normalise $x_t$ and $y_t$ at lag $k$ using \code{conditional_mean} and \code{conditional_var}}
}
\examples{
old_ts <- NEON_PRIN_5min_cleaned |>
  dplyr::select(
    Timestamp, site, turbidity, level,
    conductance, temperature
  ) |>
  tidyr::pivot_wider(
    names_from = site,
    values_from = turbidity:temperature
  )

fit_mean <- old_ts |>
  conditional_mean(turbidity_downstream ~
    s(level_upstream, k = 8) +
    s(conductance_upstream, k = 8) +
    s(temperature_upstream, k = 8))

fit_var <- old_ts |>
  conditional_var(
    turbidity_downstream ~
      s(level_upstream, k = 7) +
      s(conductance_upstream, k = 7) +
      s(temperature_upstream, k = 7),
    family = "Gamma",
    fit_mean = fit_mean
  )
fit_c_acf <- old_ts |>
  tidyr::drop_na() |>
  conditional_acf(
    turbidity_upstream ~ splines::ns(level_upstream, df = 5) +
      splines::ns(conductance_upstream, df = 5),
    lag_max = 10, fit_mean = fit_mean, fit_var = fit_var,
    df_correlation = c(5, 5)
  )
}
\seealso{
\code{\link[stats]{glm}}
}
