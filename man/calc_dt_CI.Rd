% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/estimate_dt.R
\name{calc_dt_CI}
\alias{calc_dt_CI}
\title{Computing bootstrapped confidence intervals for dt}
\usage{
calc_dt_CI(x, m, new_data = NULL)
}
\arguments{
\item{x}{Model object of class "conditional_ccf" returned from
\code{\link[conduits]{conditional_ccf}}}

\item{m}{number of replications for boostrap confidence intervals}

\item{new_data}{the dataset with the some predictors that are
set to the median value (if required). Default is set to NULL.}
}
\value{
A \code{\link[tibble]{tibble}} with estimated time lag "dt"
}
\description{
This function computes the  bootstrapped confidence intervals for dt.
It resample the residuals from the various models used in the
conditional cross-correlation calculation to generate new data.
As the  residuals are serially correlated,  a sieve bootstrap
approach to capture the autocorrelation  structure in the data.
}
\examples{
\dontrun{
old_ts <- NEON_PRIN_5min_cleaned |>
  dplyr::select(
    Timestamp, site, turbidity, level, temperature
  ) |>
  tidyr::pivot_wider(
    names_from = site,
    values_from = turbidity:temperature
  )
fit_mean_y <- old_ts |>
  conditional_mean(turbidity_downstream ~
    s(level_upstream, k = 5) +
    s(temperature_upstream, k = 5)
  )
fit_var_y <- old_ts |>
  conditional_var(
    turbidity_downstream ~
      s(level_upstream, k = 4) +
      s(temperature_upstream, k = 4),
    family = "Gamma",
    fit_mean = fit_mean_y
  )
fit_mean_x <- old_ts |>
  conditional_mean(turbidity_upstream ~
    s(level_upstream, k = 5) +
    s(temperature_upstream, k = 5)
  )
fit_var_x <- old_ts |>
  conditional_var(
    turbidity_upstream ~
      s(level_upstream, k = 4) +
      s(temperature_upstream, k = 4),
    family = "Gamma",
    fit_mean = fit_mean_x
  )
fit_c_ccf <- old_ts |>
  tidyr::drop_na() |>
  conditional_ccf(
    I(turbidity_upstream * turbidity_downstream) ~
      splines::ns(level_upstream, df = 3) +
      splines::ns(temperature_upstream, df = 3),
    lag_max = 10,
    fit_mean_x = fit_mean_x, fit_var_x = fit_var_x,
    fit_mean_y = fit_mean_y, fit_var_y = fit_var_y,
    df_correlation = c(3, 3)
  )
df_dt <- fit_c_ccf |> calc_dt_CI(100)

# Calculate  dt vs an  upstream covariate while holding the
# remaining upstream covariates at their medians
new_data <- fit_c_ccf$data
new_data <- new_data |>
  dplyr::mutate(temperature_upstream = median(temperature_upstream))
df_dt2 <- fit_c_ccf |> calc_dt_CI(100, new_data)
}


}
\author{
Priyanga Dilini Talagala & Puwasala Gamakumara
}
